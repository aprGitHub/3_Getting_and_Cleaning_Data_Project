is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, r_version == !is.na(cran$r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran,c(ip_id, package, size))
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size * 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarise(mean(by_package$size))
summarize(mean(by_package$size))
summarize(mean(by_package$size))
0
info()
summarize(by_package,mean(size))
play()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
nxt()
submit()
play()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
rm(pack_sum)
nxt()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
play()
?filter
filter(pack_sum, count(count)>679)
filter(pack_sum, count>679)
filter(pack_sum, count>679)
nxt()
top_counts <- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
submit()
info()
cran %>%
select(ip_id, country, package, size) %>%
print
""
""
info()
bye()
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
play()
students3 %>%
gather(key=class, value=grade , class1:class5 , na.rm = TRUE) %>%
print
nxt()
submit()
?spread
play()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , c("midterm","final")) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , term %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , term) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , c("midterm","final")) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(c("midterm","final"),test) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key=test,value=val) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key=test,value=c("midterm","final") %>%
print
""
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key=test,value=c("midterm","final")) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key=test,v %>%
print
""
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(key=test,v )%>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(midterm,final)%>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,final)%>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test,grade)%>%
print
nxt()
submit()
extract_numeric("class5")
play()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric()) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(newclass = extract_numeric(class)) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class)) %>%
print
nxt()
submit()
students4
play()
student_info <- students4 %>%
select( id, name, sex ) %>%
print
nxt()
submit()
submit()
submit()
passed
failed
mutate(passed, passed = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed,failed)
play()
failed
passed
nxt()
sat
play()
?select
sat %>%
select(-contains("total")) %>%
gather(key = part_sex, value = count, -score_range) %>%
separate(part_sex, c("part", "sex"))> %>%
print
sat %>%
select(-contains("total")) %>%
gather(key = part_sex, value = count, -score_range) %>%
separate(part_sex, c("part", "sex"))> %>%
print
sat %>%
select(-contains("total")) %>%
gather(key = part_sex, value = count, -score_range)
sat %>%
select(-contains("total")) %>%
gather(key = part_sex, value = count, -score_range) %>%
separate(col=part_sex, into = c("part", "sex"))> %>%
print
sat %>%
select(-contains("total")) %>%
gather(key = part_sex, value = count, -score_range) %>%
separate(col=part_sex, into = c("part", "sex"))>
sat %>%
select(-contains("total")) %>%
gather(key = part_sex, value = count, -score_range) %>%
separate(col=part_sex, into = c("part", "sex")) %>%
print
nxt()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
?lubridate
help(package = lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone="Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(start= last_time, end=arrive)
as.period(how_long)
stopwatch()
setwd(/Users/apr/Dropbox/ella/ikastaroak/DataScience/3_Getting_and_Cleaning_Data/project/apr
)
setwd("/Users/apr/Dropbox/ella/ikastaroak/DataScience/3_Getting_and_Cleaning_Data/project/apr")
filePath="data/UCI\ HAR\ Dataset/test/X_test.txt"
acs <- read.table(filePath, sep=",", header=TRUE)
dim(acs)
filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
data <- read.table(filePath, sep=",", header=TRUE)
dim(data)
class(data)
filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
data <- read.csv(filePath, sep=",", header=TRUE)
dim(data)
head(data)
names(data)
filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
data <- read.table(filePath, sep=",", header=TRUE)
dim(data)
train_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/train/X_train.txt"
train_activityCode_filePath="./data/UCI\ HAR\ Dataset/train/y_train.txt"
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
activityCode_test_filePath="./data/UCI\ HAR\ Dataset/test/y_test.txt"
data <- read.table(filePath, sep=",", header=TRUE)
dim(data)
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
test_data <- read.table(filePath, sep=" ", header=TRUE)
print(paste("test_data dimentsioa: ",dim(test_data)))
activityCode_test_filePath="./data/UCI\ HAR\ Dataset/test/y_test.txt"
test_code <- read.table(activityCode_test_filePath, sep=" ", header=TRUE)
print(paste("test_code dimentsioa: ",dim(test_data)))
activityCode_test_filePath="./data/UCI\ HAR\ Dataset/test/y_test.txt"
test_code <- read.table(activityCode_test_filePath, sep=" ", header=TRUE)
print(paste("test_code dimentsioa: ", dim(test_code)))
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
test_data <- read.table(filePath, sep=" ", header=TRUE)
print(paste("test_data dimentsioa: ",dim(test_data)))
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
test_data <- read.table(test_processedfeatures_filePath, sep=" ", header=TRUE)
print(paste("test_data dimentsioa: ",dim(test_data)))
train_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/train/X_train.txt"
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
train_data <- read.csv(test_processedfeatures_filePath, sep=" ")
test_data  <- read.table(test_processedfeatures_filePath, sep=" ")
print(paste("train_data dimentsioa: ",dim(train_data)))
print(paste("test_data dimentsioa: ",dim(test_data)))
#train_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/train/X_train.txt"
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
#train_data <- read.csv(test_processedfeatures_filePath, sep=" ")
test_data  <- read.table(test_processedfeatures_filePath, sep=" ")
#print(paste("train_data dimentsioa: ",dim(train_data)))
print(paste("test_data dimentsioa: ",dim(test_data)))
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
test_data  <- read.csv(test_processedfeatures_filePath, sep=" ")
print(paste("test_data dimentsioa: ",dim(test_data)))
print("test_data dimentsioa: ")
dim(test_data)
#train_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/train/X_train.txt"
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
#train_data <- read.csv(train_processedfeatures_filePath, sep=" ")
test_data   <- read.csv(test_processedfeatures_filePath, sep=" ")
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_data)
train_activityCode_filePath="./data/UCI\ HAR\ Dataset/train/y_train.txt"
test_activityCode_filePath="./data/UCI\ HAR\ Dataset/test/y_test.txt"
#train_code <- read.csv(train_processedfeatures_filePath, sep=" ", header=FALSE)
test_code   <- read.csv(test_processedfeatures_filePath, sep=" ", header=FALSE)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_code)
#train_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/train/X_train.txt"
test_processedfeatures_filePath="./data/UCI\ HAR\ Dataset/test/X_test.txt"
#train_data <- read.csv(train_processedfeatures_filePath, sep=" ", header=FALSE)
test_data   <- read.csv(test_processedfeatures_filePath, sep=" ", header=FALSE)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_data)
################
train_activityCode_filePath="./data/UCI\ HAR\ Dataset/train/y_train.txt"
test_activityCode_filePath="./data/UCI\ HAR\ Dataset/test/y_test.txt"
#train_code <- read.csv(train_processedfeatures_filePath, sep=" ", header=FALSE)
test_code   <- read.csv(test_processedfeatures_filePath, sep=" ", header=FALSE)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_code)
test_code   <- read.csv(test_activityCode_filePath, sep=" ", header=FALSE)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_code)
train_activityCode_filePath <-  "./data/UCI\ HAR\ Dataset/train/y_train.txt"
test_activityCode_filePath  <-  "./data/UCI\ HAR\ Dataset/test/y_test.txt"
#train_code <- read.csv(train_processedfeatures_filePath, sep=" ", header=FALSE)
test_code   <- read.csv(test_activityCode_filePath, sep=" ", header=FALSE)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_code)
#train_processedfeatures_filePath <- "./data/UCI\ HAR\ Dataset/train/X_train.txt"
test_processedfeatures_filePath   <- "./data/UCI\ HAR\ Dataset/test/X_test.txt"
#train_data <- read.csv(train_processedfeatures_filePath, sep=" ", header=FALSE)
test_data   <- read.table(test_processedfeatures_filePath)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_data)
################
train_activityCode_filePath <-  "./data/UCI\ HAR\ Dataset/train/y_train.txt"
test_activityCode_filePath  <-  "./data/UCI\ HAR\ Dataset/test/y_test.txt"
#train_code <- read.csv(train_processedfeatures_filePath, sep=" ", header=FALSE)
test_code   <- read.table(test_activityCode_filePath)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_code)
#train_processedfeatures_filePath <- "./data/UCI\ HAR\ Dataset/train/X_train.txt"
test_processedfeatures_filePath   <- "./data/UCI\ HAR\ Dataset/test/X_test.txt"
#train_data <- read.table(train_processedfeatures_filePath)
test_data   <- read.table(test_processedfeatures_filePath)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_data dimentsioa: ")
dim(test_data)
################
train_activityCode_filePath <-  "./data/UCI\ HAR\ Dataset/train/y_train.txt"
test_activityCode_filePath  <-  "./data/UCI\ HAR\ Dataset/test/y_test.txt"
#train_code <- read.table(train_processedfeatures_filePath)
test_code   <- read.table(test_activityCode_filePath)
#print(paste("train_data dimentsioa: ",dim(train_data)))
print("test_code dimentsioa: ")
dim(test_code)
names(test_data)
names(test_code)
downloadFromURL <- function  (fileUrl="http://dir.csv", workdirPath=".", fileName="dataFile")
{
## Step 0: Checking for and creating directories
if(!file.exists(workdirPath))
{
dir.create(workdirPath)
}
## Step 1: download the data file
filePath=paste(workdirPath,fileName,sep="/")
if(!file.exists(filePath))
{
download.file(fileUrl, destfile=filePath,method="curl")
dateDownloaded <- date()
print(paste("INFO: the data file downloaded on: ", dateDownloaded))
}
else{
print("Saionara baby!")
}
}
# this is how you can import the function file:
# source("downloadFromURL.R")
#####
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
dataDir <- "./data" # unzip EZ DABIL HAU  ../data denean :_!
fileNameZIP <- "UCI_HAR_Dataset.zip"
filePathZIP <- paste(dataDir,fileNameZIP,sep="/")
downloadFromURL(fileUrl,workdirPath=dataDir,fileName=fileNameZIP)
unzip(zipfile=filePathZIP, exdir=dataDir)
## -----------------------------
## Read the data into R objects
## -----------------------------
# Get the subjects
subject_test  <- read.table(paste(dataDir,"UCI HAR Dataset/test/subject_test.txt",sep="/"))
subject_train <- read.table(paste(dataDir,"UCI HAR Dataset/train/subject_train.txt",sep="/"))
# Get the features
x_test  <- read.table(paste(dataDir,"UCI\ HAR\ Dataset/test/X_test.txt",sep="/"))
x_train <- read.table(paste(dataDir,"UCI\ HAR\ Dataset/train/X_train.txt",sep="/"))
# Get the activities and change each code by the appropriate label
y_test  <- read.table(paste(dataDir,"UCI\ HAR\ Dataset/test/y_test.txt",sep="/"))
y_train <- read.table(paste(dataDir,"UCI\ HAR\ Dataset/train/y_train.txt",sep="/"))
#
ylabels <- read.table(paste(dataDir,"UCI HAR Dataset/activity_labels.txt",sep="/")) # here the label is a factor of a number-code and activity-label
#
for (i in ylabels$V1) {
y_test$V1[y_test$V1 == i]   <- as.character(ylabels$V2[i])
y_train$V1[y_train$V1 == i] <- as.character(ylabels$V2[i])
}
# Column-bind: subject, features and activity
x_y_test  <- cbind(subject_test, x_test, y_test)
x_y_train <- cbind(subject_train, x_train, y_train)
## -----------------------------
## Merge the training and the test sets to create one data set.
## -----------------------------
data <- rbind(x_y_train,x_y_test)
## -----------------------------
## Arrange the names of the: subject, features, activity
## -----------------------------
# Read the names of the features
features <- read.table(paste(dataDir,"UCI HAR Dataset/features.txt",sep="/")) # Honek bi atributu ditu posizioa eta izena
features <- features[2] # amaieran, frame motakoa da
names(features) <- c("featName")
# Add the names: subject, features, activity
names(data)  <- c("subject",as.character(features$featName),"activity")
usefulFeatIdx <- unique(grep("mean|std|subject|activity", names(data), ignore.case = TRUE))
data  <- subset(data, select=usefulFeatIdx)
outFile1="outFile_Tidy_0.csv"
write.csv(data, file=paste(dataDir, outFile1 ,sep="/"))
## -----------------------------
## Create a second, independent tidy data set with
## the average of each variable for each activity and each subject
## -----------------------------
AvVble_perSubject <- by(data, INDICES=list(SUBJECT=data$subject,ACTIVITY=data$activity), FUN=
function(x){
y <- subset(x, select=-c(subject,activity)) # Do not make the mean neither of the subject nor of the activity:!
apply(y, 2, mean) # Remember: 1 indicates rows, 2 indicates columns, c(1, 2) indicates rows and columns.
}
)
print("There you are the the average of each variable for each activity and each subject")
AvVble_perSubject
# Write the data into an output file
# Please upload your data set as a txt file created with write.table() using row.name=FALSE
# outFile2="outFile_Tidy.csv"
# write.csv(AvVble_perSubject, file=paste(dataDir, outFile2 ,sep="/"))
outFile2="outFile_Tidy.txt"
write.table(AvVble_perSubject, file=paste(dataDir, outFile2 ,sep=","), sep="/", row.name=FALSE)
